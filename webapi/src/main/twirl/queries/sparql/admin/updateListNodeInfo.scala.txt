@*
 * Copyright Â© 2015-2019 the contributors (see Contributors.md).
 *
 * This file is part of Knora.
 *
 * Knora is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Knora is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public
 * License along with Knora.  If not, see <http://www.gnu.org/licenses/>.
 *@

@import org.knora.webapi.IRI
@import org.knora.webapi.messages.store.triplestoremessages.StringLiteralV2

@**
 * Updates an existing listnode with the provided values.
 *
 * @param dataNamedGraph     the named graph to update.
 * @param triplestore        the name of the triplestore being used. The template uses this value to exclude inferred
                             results from the WHERE clause of the update.
 * @param nodeIri            the IRI of the listnode we want to update.
 * @param projectIri         the IRI of the listnode's project.
 * @param nodeClassIri       the IRI of the OWL class that the node should belong to.
 * @param maybeName          the new optional name value
 * @param maybelabels        the new optional label values.
 * @param maybeComments      the new optional comment values.
 *@
@(dataNamedGraph: IRI,
  triplestore: String,
  nodeIri: IRI,
  projectIri: IRI,
  nodeClassIri: IRI,
  maybeName: Option[Option[String]],
  maybeLabels: Option[Seq[StringLiteralV2]],
  maybeComments: Option[Seq[StringLiteralV2]])

prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix knora-base: <http://www.knora.org/ontology/knora-base#>

WITH <@dataNamedGraph>
DELETE {

    @* Delete current values, for which we have a new one. *@

    @if(maybeName.nonEmpty) {
        ?nodeIri knora-base:listNodeName ?currentListNodeName .
    }

    @if(maybeLabels.nonEmpty) {
        ?nodeIri rdfs:label ?currentLabels .
    }

    @if(maybeComments.nonEmpty) {
        ?nodeIri rdfs:comment ?currentComments .
    }

} INSERT {

    @* Add the new values. *@

    @if(maybeName.nonEmpty) {
        @if(maybeName.get.nonEmpty) {
            ?nodeIri knora-base:listNodeName "@maybeName.get.get"^^xsd:string .
        }
    }

    @if(maybeLabels.nonEmpty) {
        @for(label <- maybeLabels.get) {
            @if(label.language.nonEmpty) {
                ?nodeIri rdfs:label """@label.value"""@@@{label.language.get} .
            } else {
                ?nodeIri rdfs:label """@label.value"""^^xsd:string .
            }
        }
     }

    @if(maybeComments.nonEmpty) {
        @for(comment <- maybeComments.get) {
            @if(comment.language.nonEmpty) {
                ?nodeIri rdfs:comment """@comment.value"""@@@{comment.language.get} .
            } else {
                ?nodeIri rdfs:comment """@comment.value"""^^xsd:string .
            }
        }
    }
}

@*

GraphDB's consistency checking requires reasoning, but reasoning interferes with certain things
in the WHERE clauses of our SPARQL updates, so we set a GraphDB-specific flag to return only
explicit statements in the WHERE clause here.

*@

@triplestore match {
    case "graphdb" | "graphdb-free" => {
        USING <http://www.ontotext.com/explicit>
    }

    case other => {}
}

WHERE {
    BIND(IRI("@nodeIri") AS ?nodeIri)
    BIND(IRI("@projectIri") AS ?projectIri)

    @* Get all current defined values. *@

    ?nodeIri rdf:type knora-base:ListNode .

    ?nodeIri knora-base:attachedToProject ?projectIri .

    optional {?nodeIri knora-base:listNodeName ?currentListNodeName .}

    optional {?nodeIri rdfs:label ?currentLabels .}

    optional {?nodeIri rdfs:comment ?currentComments .}

}
